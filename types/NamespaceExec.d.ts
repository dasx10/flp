import Constanta from "./Constanta";
import Lambda from "./Lambda";

type PromiseType<Value> = Value extends Promise<infer Type> ? Type : Value;

type NAMESPACE = Record<string, Promise<Lambda | Constanta>>

type Map<Namespace extends NAMESPACE, Keys extends readonly (keyof _ArrayNamespace)[]> = Keys extends readonly [infer Key, ...infer Next]
  ? [PromiseType<Namespace[Key]>, ...Map<Next>]
  : []
;

type Load<Namespace extends NAMESPACE, Keys extends readonly keyof Namespace> = Promise<Map<Namespace, Keys>>

type NamespaceExec<Namespace extends NAMESPACE> = {
  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
  >(value: readonly [A, B]): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
  >(
    value: readonly [A, B, C],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
  >(
    value: readonly [A, B, C, D],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
  >(
    value: readonly [A, B, C, D, E],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
  >(
    value: readonly [A, B, C, D, E, F],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  >(
    value: readonly [A, B, C, D, E, F, G],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>
  ]>;

  <
  A extends keyof Namespace,
  B extends Exclude<keyof Namespace, A>,
  C extends Exclude<keyof Namespace, A | B>,
  D extends Exclude<keyof Namespace, A | B | C>,
  E extends Exclude<keyof Namespace, A | B | C | D>,
  F extends Exclude<keyof Namespace, A | B | C | D | E>,
  G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
  >(
    value: readonly [A, B, C, D, E, F, G, H],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>
  ]>;

  <
  A extends keyof Namespace,
  B extends Exclude<keyof Namespace, A>,
  C extends Exclude<keyof Namespace, A | B>,
  D extends Exclude<keyof Namespace, A | B | C>,
  E extends Exclude<keyof Namespace, A | B | C | D>,
  F extends Exclude<keyof Namespace, A | B | C | D | E>,
  G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
  I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>
  ]>;

  <
  A extends keyof Namespace,
  B extends Exclude<keyof Namespace, A>,
  C extends Exclude<keyof Namespace, A | B>,
  D extends Exclude<keyof Namespace, A | B | C>,
  E extends Exclude<keyof Namespace, A | B | C | D>,
  F extends Exclude<keyof Namespace, A | B | C | D | E>,
  G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
  I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
  J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>
  ]>;

  <
  A extends keyof Namespace,
  B extends Exclude<keyof Namespace, A>,
  C extends Exclude<keyof Namespace, A | B>,
  D extends Exclude<keyof Namespace, A | B | C>,
  E extends Exclude<keyof Namespace, A | B | C | D>,
  F extends Exclude<keyof Namespace, A | B | C | D | E>,
  G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
  I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
  J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
  K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>
  ]>;

  <
  A extends keyof Namespace,
  B extends Exclude<keyof Namespace, A>,
  C extends Exclude<keyof Namespace, A | B>,
  D extends Exclude<keyof Namespace, A | B | C>,
  E extends Exclude<keyof Namespace, A | B | C | D>,
  F extends Exclude<keyof Namespace, A | B | C | D | E>,
  G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
  I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
  J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
  K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
  L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>
  ]>;

  <
  A extends keyof Namespace,
  B extends Exclude<keyof Namespace, A>,
  C extends Exclude<keyof Namespace, A | B>,
  D extends Exclude<keyof Namespace, A | B | C>,
  E extends Exclude<keyof Namespace, A | B | C | D>,
  F extends Exclude<keyof Namespace, A | B | C | D | E>,
  G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
  I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
  J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
  K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
  L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
  M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>
  ]>;

  <
  A extends keyof Namespace,
  B extends Exclude<keyof Namespace, A>,
  C extends Exclude<keyof Namespace, A | B>,
  D extends Exclude<keyof Namespace, A | B | C>,
  E extends Exclude<keyof Namespace, A | B | C | D>,
  F extends Exclude<keyof Namespace, A | B | C | D | E>,
  G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
  I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
  J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
  K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
  L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
  M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
  N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
  O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>
  ]>;

  <
  A extends keyof Namespace,
  B extends Exclude<keyof Namespace, A>,
  C extends Exclude<keyof Namespace, A | B>,
  D extends Exclude<keyof Namespace, A | B | C>,
  E extends Exclude<keyof Namespace, A | B | C | D>,
  F extends Exclude<keyof Namespace, A | B | C | D | E>,
  G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
  H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
  I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
  J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
  K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
  L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
  M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
  N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
  O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
  P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
    S extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>,
    PromiseType<Namespace[S]>,
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
    S extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R>,
    T extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>,
    PromiseType<Namespace[S]>,
    PromiseType<Namespace[T]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
    S extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R>,
    T extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S>,
    U extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>,
    PromiseType<Namespace[S]>,
    PromiseType<Namespace[T]>,
    PromiseType<Namespace[U]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
    S extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R>,
    T extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S>,
    U extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T>,
    V extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>,
    PromiseType<Namespace[S]>,
    PromiseType<Namespace[T]>,
    PromiseType<Namespace[U]>,
    PromiseType<Namespace[V]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
    S extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R>,
    T extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S>,
    U extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T>,
    V extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U>,
    W extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>,
    PromiseType<Namespace[S]>,
    PromiseType<Namespace[T]>,
    PromiseType<Namespace[U]>,
    PromiseType<Namespace[V]>,
    PromiseType<Namespace[W]>,
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
    S extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R>,
    T extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S>,
    U extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T>,
    V extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U>,
    W extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V>,
    X extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>,
    PromiseType<Namespace[S]>,
    PromiseType<Namespace[T]>,
    PromiseType<Namespace[U]>,
    PromiseType<Namespace[V]>,
    PromiseType<Namespace[W]>,
    PromiseType<Namespace[X]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
    S extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R>,
    T extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S>,
    U extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T>,
    V extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U>,
    W extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V>,
    X extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W>,
    Y extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>,
    PromiseType<Namespace[S]>,
    PromiseType<Namespace[T]>,
    PromiseType<Namespace[U]>,
    PromiseType<Namespace[V]>,
    PromiseType<Namespace[W]>,
    PromiseType<Namespace[X]>,
    PromiseType<Namespace[Y]>
  ]>;

  <
    A extends keyof Namespace,
    B extends Exclude<keyof Namespace, A>,
    C extends Exclude<keyof Namespace, A | B>,
    D extends Exclude<keyof Namespace, A | B | C>,
    E extends Exclude<keyof Namespace, A | B | C | D>,
    F extends Exclude<keyof Namespace, A | B | C | D | E>,
    G extends Exclude<keyof Namespace, A | B | C | D | E | F>,
    H extends Exclude<keyof Namespace, A | B | C | D | E | F | G>,
    I extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H>,
    J extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I>,
    K extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J>,
    L extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K>,
    M extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L>,
    N extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M>,
    O extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N>,
    P extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O>,
    Q extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P>,
    R extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q>,
    S extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R>,
    T extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S>,
    U extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T>,
    V extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U>,
    W extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V>,
    X extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W>,
    Y extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X>,
    Z extends Exclude<keyof Namespace, A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y>,
  >(
    value: readonly [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z],
  ): Promise<[
    PromiseType<Namespace[A]>,
    PromiseType<Namespace[B]>,
    PromiseType<Namespace[C]>,
    PromiseType<Namespace[D]>,
    PromiseType<Namespace[E]>,
    PromiseType<Namespace[F]>,
    PromiseType<Namespace[G]>,
    PromiseType<Namespace[H]>,
    PromiseType<Namespace[I]>,
    PromiseType<Namespace[J]>,
    PromiseType<Namespace[K]>,
    PromiseType<Namespace[L]>,
    PromiseType<Namespace[M]>,
    PromiseType<Namespace[N]>,
    PromiseType<Namespace[O]>,
    PromiseType<Namespace[P]>,
    PromiseType<Namespace[Q]>,
    PromiseType<Namespace[R]>,
    PromiseType<Namespace[S]>,
    PromiseType<Namespace[T]>,
    PromiseType<Namespace[U]>,
    PromiseType<Namespace[V]>,
    PromiseType<Namespace[W]>,
    PromiseType<Namespace[X]>,
    PromiseType<Namespace[Y]>,
    PromiseType<Namespace[Z]>
  ]>;

} & Namespace;

export default NamespaceExec;
